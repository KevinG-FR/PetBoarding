-- Quartz.NET tables for PostgreSQL (idempotent version)

CREATE TABLE IF NOT EXISTS QRTZ_JOB_DETAILS
(
    SCHED_NAME        VARCHAR(120) NOT NULL,
    JOB_NAME          VARCHAR(200) NOT NULL,
    JOB_GROUP         VARCHAR(200) NOT NULL,
    DESCRIPTION       VARCHAR(250) NULL,
    JOB_CLASS_NAME    VARCHAR(250) NOT NULL,
    IS_DURABLE        BOOL NOT NULL,
    IS_NONCONCURRENT  BOOL NOT NULL,
    IS_UPDATE_DATA    BOOL NOT NULL,
    REQUESTS_RECOVERY BOOL NOT NULL,
    JOB_DATA          BYTEA NULL,
    PRIMARY KEY (SCHED_NAME, JOB_NAME, JOB_GROUP)
);

CREATE TABLE IF NOT EXISTS QRTZ_TRIGGERS
(
    SCHED_NAME     VARCHAR(120) NOT NULL,
    TRIGGER_NAME   VARCHAR(200) NOT NULL,
    TRIGGER_GROUP  VARCHAR(200) NOT NULL,
    JOB_NAME       VARCHAR(200) NOT NULL,
    JOB_GROUP      VARCHAR(200) NOT NULL,
    DESCRIPTION    VARCHAR(250) NULL,
    NEXT_FIRE_TIME BIGINT NULL,
    PREV_FIRE_TIME BIGINT NULL,
    PRIORITY       INTEGER NULL,
    TRIGGER_STATE  VARCHAR(16) NOT NULL,
    TRIGGER_TYPE   VARCHAR(8) NOT NULL,
    START_TIME     BIGINT NOT NULL,
    END_TIME       BIGINT NULL,
    CALENDAR_NAME  VARCHAR(200) NULL,
    MISFIRE_INSTR  SMALLINT NULL,
    JOB_DATA       BYTEA NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints
        WHERE constraint_name = 'qrtz_triggers_job_fk'
    ) THEN
        ALTER TABLE QRTZ_TRIGGERS
            ADD CONSTRAINT qrtz_triggers_job_fk
            FOREIGN KEY (SCHED_NAME, JOB_NAME, JOB_GROUP)
            REFERENCES QRTZ_JOB_DETAILS (SCHED_NAME, JOB_NAME, JOB_GROUP);
    END IF;
END$$;

CREATE TABLE IF NOT EXISTS QRTZ_SIMPLE_TRIGGERS
(
    SCHED_NAME      VARCHAR(120) NOT NULL,
    TRIGGER_NAME    VARCHAR(200) NOT NULL,
    TRIGGER_GROUP   VARCHAR(200) NOT NULL,
    REPEAT_COUNT    BIGINT NOT NULL,
    REPEAT_INTERVAL BIGINT NOT NULL,
    TIMES_TRIGGERED BIGINT NOT NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints
        WHERE constraint_name = 'qrtz_simple_triggers_fk'
    ) THEN
        ALTER TABLE QRTZ_SIMPLE_TRIGGERS
            ADD CONSTRAINT qrtz_simple_triggers_fk
            FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
            REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
    END IF;
END$$;

CREATE TABLE IF NOT EXISTS QRTZ_CRON_TRIGGERS
(
    SCHED_NAME      VARCHAR(120) NOT NULL,
    TRIGGER_NAME    VARCHAR(200) NOT NULL,
    TRIGGER_GROUP   VARCHAR(200) NOT NULL,
    CRON_EXPRESSION VARCHAR(120) NOT NULL,
    TIME_ZONE_ID    VARCHAR(80),
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints
        WHERE constraint_name = 'qrtz_cron_triggers_fk'
    ) THEN
        ALTER TABLE QRTZ_CRON_TRIGGERS
            ADD CONSTRAINT qrtz_cron_triggers_fk
            FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
            REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
    END IF;
END$$;

CREATE TABLE IF NOT EXISTS QRTZ_SIMPROP_TRIGGERS
(
    SCHED_NAME    VARCHAR(120) NOT NULL,
    TRIGGER_NAME  VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    STR_PROP_1    VARCHAR(512) NULL,
    STR_PROP_2    VARCHAR(512) NULL,
    STR_PROP_3    VARCHAR(512) NULL,
    INT_PROP_1    INT NULL,
    INT_PROP_2    INT NULL,
    LONG_PROP_1   BIGINT NULL,
    LONG_PROP_2   BIGINT NULL,
    DEC_PROP_1    NUMERIC(13,4) NULL,
    DEC_PROP_2    NUMERIC(13,4) NULL,
    BOOL_PROP_1   BOOL NULL,
    BOOL_PROP_2   BOOL NULL,
    TIME_ZONE_ID  VARCHAR(80) NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints
        WHERE constraint_name = 'qrtz_simprop_triggers_fk'
    ) THEN
        ALTER TABLE QRTZ_SIMPROP_TRIGGERS
            ADD CONSTRAINT qrtz_simprop_triggers_fk
            FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
            REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
    END IF;
END$$;

CREATE TABLE IF NOT EXISTS QRTZ_BLOB_TRIGGERS
(
    SCHED_NAME    VARCHAR(120) NOT NULL,
    TRIGGER_NAME  VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    BLOB_DATA     BYTEA NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints
        WHERE constraint_name = 'qrtz_blob_triggers_fk'
    ) THEN
        ALTER TABLE QRTZ_BLOB_TRIGGERS
            ADD CONSTRAINT qrtz_blob_triggers_fk
            FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
            REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
    END IF;
END$$;

CREATE TABLE IF NOT EXISTS QRTZ_CALENDARS
(
    SCHED_NAME    VARCHAR(120) NOT NULL,
    CALENDAR_NAME VARCHAR(200) NOT NULL,
    CALENDAR      BYTEA NOT NULL,
    PRIMARY KEY (SCHED_NAME, CALENDAR_NAME)
);

CREATE TABLE IF NOT EXISTS QRTZ_PAUSED_TRIGGER_GRPS
(
    SCHED_NAME    VARCHAR(120) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_GROUP)
);

CREATE TABLE IF NOT EXISTS QRTZ_FIRED_TRIGGERS
(
    SCHED_NAME        VARCHAR(120) NOT NULL,
    ENTRY_ID          VARCHAR(95) NOT NULL,
    TRIGGER_NAME      VARCHAR(200) NOT NULL,
    TRIGGER_GROUP     VARCHAR(200) NOT NULL,
    INSTANCE_NAME     VARCHAR(200) NOT NULL,
    FIRED_TIME        BIGINT NOT NULL,
    SCHED_TIME        BIGINT NOT NULL,
    PRIORITY          INTEGER NOT NULL,
    STATE             VARCHAR(16) NOT NULL,
    JOB_NAME          VARCHAR(200) NULL,
    JOB_GROUP         VARCHAR(200) NULL,
    IS_NONCONCURRENT  BOOL NULL,
    REQUESTS_RECOVERY BOOL NULL,
    PRIMARY KEY (SCHED_NAME, ENTRY_ID)
);

CREATE TABLE IF NOT EXISTS QRTZ_SCHEDULER_STATE
(
    SCHED_NAME        VARCHAR(120) NOT NULL,
    INSTANCE_NAME     VARCHAR(200) NOT NULL,
    LAST_CHECKIN_TIME BIGINT NOT NULL,
    CHECKIN_INTERVAL  BIGINT NOT NULL,
    PRIMARY KEY (SCHED_NAME, INSTANCE_NAME)
);

CREATE TABLE IF NOT EXISTS QRTZ_LOCKS
(
    SCHED_NAME VARCHAR(120) NOT NULL,
    LOCK_NAME  VARCHAR(40) NOT NULL,
    PRIMARY KEY (SCHED_NAME, LOCK_NAME)
);

-- Indexes (idempotent)
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_qrtz_j_req_recovery') THEN CREATE INDEX idx_qrtz_j_req_recovery ON QRTZ_JOB_DETAILS(SCHED_NAME, REQUESTS_RECOVERY); END IF; END$$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_qrtz_j_grp') THEN CREATE INDEX idx_qrtz_j_grp ON QRTZ_JOB_DETAILS(SCHED_NAME, JOB_GROUP); END IF; END$$;

DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_qrtz_t_j') THEN CREATE INDEX idx_qrtz_t_j ON QRTZ_TRIGGERS(SCHED_NAME, JOB_NAME, JOB_GROUP); END IF; END$$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_qrtz_t_jg') THEN CREATE INDEX idx_qrtz_t_jg ON QRTZ_TRIGGERS(SCHED_NAME, JOB_GROUP); END IF; END$$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_qrtz_t_c') THEN CREATE INDEX idx_qrtz_t_c ON QRTZ_TRIGGERS(SCHED_NAME, CALENDAR_NAME); END IF; END$$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_qrtz_t_g') THEN CREATE INDEX idx_qrtz_t_g ON QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_GROUP); END IF; END$$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_qrtz_t_state') THEN CREATE INDEX idx_qrtz_t_state ON QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_STATE); END IF; END$$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_qrtz_t_n_state') THEN CREATE INDEX idx_qrtz_t_n_state ON QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP, TRIGGER_STATE); END IF; END$$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_qrtz_t_n_g_state') THEN CREATE INDEX idx_qrtz_t_n_g_state ON QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_GROUP, TRIGGER_STATE); END IF; END$$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_qrtz_t_next_fire') THEN CREATE INDEX idx_qrtz_t_next_fire ON QRTZ_TRIGGERS(SCHED_NAME, NEXT_FIRE_TIME); END IF; END$$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_qrtz_t_nft_st') THEN CREATE INDEX idx_qrtz_t_nft_st ON QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_STATE, NEXT_FIRE_TIME); END IF; END$$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_qrtz_t_nft_misfire') THEN CREATE INDEX idx_qrtz_t_nft_misfire ON QRTZ_TRIGGERS(SCHED_NAME, MISFIRE_INSTR, NEXT_FIRE_TIME); END IF; END$$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_qrtz_t_nft_st_misfire') THEN CREATE INDEX idx_qrtz_t_nft_st_misfire ON QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_STATE, MISFIRE_INSTR, NEXT_FIRE_TIME); END IF; END$$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_qrtz_t_nft_st_misfire_grp') THEN CREATE INDEX idx_qrtz_t_nft_st_misfire_grp ON QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_STATE, MISFIRE_INSTR, NEXT_FIRE_TIME, TRIGGER_GROUP); END IF; END$$;

DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_qrtz_ft_trig_inst_name') THEN CREATE INDEX idx_qrtz_ft_trig_inst_name ON QRTZ_FIRED_TRIGGERS(SCHED_NAME, INSTANCE_NAME); END IF; END$$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_qrtz_ft_inst_job_req_rcvry') THEN CREATE INDEX idx_qrtz_ft_inst_job_req_rcvry ON QRTZ_FIRED_TRIGGERS(SCHED_NAME, INSTANCE_NAME, REQUESTS_RECOVERY); END IF; END$$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_qrtz_ft_j_g') THEN CREATE INDEX idx_qrtz_ft_j_g ON QRTZ_FIRED_TRIGGERS(SCHED_NAME, JOB_NAME, JOB_GROUP); END IF; END$$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_qrtz_ft_jg') THEN CREATE INDEX idx_qrtz_ft_jg ON QRTZ_FIRED_TRIGGERS(SCHED_NAME, JOB_GROUP); END IF; END$$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_qrtz_ft_t_g') THEN CREATE INDEX idx_qrtz_ft_t_g ON QRTZ_FIRED_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP); END IF; END$$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_qrtz_ft_tg') THEN CREATE INDEX idx_qrtz_ft_tg ON QRTZ_FIRED_TRIGGERS(SCHED_NAME, TRIGGER_GROUP); END IF; END$$;
