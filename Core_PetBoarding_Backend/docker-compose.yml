services:
  petboarding_api:
    image: ${DOCKER_REGISTRY-}petboardingapi
    container_name: petboarding.api
    build:
      context: ..
      dockerfile: Core_PetBoarding_Backend/PetBoarding_Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:5001;http://+:5000
      - ASPNETCORE_Kestrel__Certificates__Default__Password=password123
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
      - ConnectionStrings__Database=Host=postgres.database;Port=5432;Database=petboarding;Username=postgres;Password=postgres
    ports:
      - '5000:5000'
      - '5001:5001'
    volumes:
      - ${USERPROFILE}\.aspnet\https:/https:ro
    depends_on:
      postgres.database:
        condition: service_healthy
      memcached:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
      - database-network
      - cache-network
      - messaging-network

  petboarding_taskworker:
    image: ${DOCKER_REGISTRY-}petboardingtaskworker
    container_name: petboarding.taskworker
    build:
      context: ..
      dockerfile: Core_PetBoarding_Backend/PetBoarding_TaskWorker/Dockerfile
    environment:
      - DOTNET_ENVIRONMENT=Development
      - ConnectionStrings__Database=Host=postgres.database;Port=5432;Database=petboarding;Username=postgres;Password=postgres
      - TaskWorker__ExpiredBasketCleanupIntervalMinutes=10
      - TaskWorker__BasketExpirationMinutes=30
      - TaskWorker__ExpiredReservationProcessingIntervalMinutes=15
    depends_on:
      petboarding_api:
        condition: service_started
      postgres.database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 1
    networks:
      - app-network
      - database-network
      - messaging-network

  postgres.database:
    image: postgres:17-alpine
    container_name: petboarding.postgres.database
    hostname: postgres.database
    environment:
      - POSTGRES_DB=petboarding
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./.containers/petboarding-db:/var/lib/postgresql/data
      - ./PetBoarding_TaskWorker/init-quartz.sql:/docker-entrypoint-initdb.d/init-quartz.sql
    ports:
      - 5432:5432
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d petboarding']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - database-network

  memcached:
    image: memcached:1.6.32-alpine
    container_name: petboarding.memcached
    hostname: memcached
    command: memcached -m 256 -p 11211 -u memcache -l 0.0.0.0
    ports:
      - '11211:11211'
    restart: unless-stopped
    networks:
      - cache-network

  rabbitmq:
    image: rabbitmq:3.13.7-management-alpine
    container_name: petboarding.rabbitmq
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: petboarding
      RABBITMQ_DEFAULT_PASS: petboarding123
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - '5672:5672' # AMQP port
      - '15672:15672' # Management UI
    volumes:
      - ./.containers/rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - messaging-network

networks:
  app-network:
    driver: bridge
  database-network:
    driver: bridge
  cache-network:
    driver: bridge
  messaging-network:
    driver: bridge

volumes:
  petboarding-db:
    driver: local
    name: petboarding_postgres_data
